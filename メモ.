start()
一番初めの画面を生成する関数

・スタートボタンを出力する際、いきなりボタンを生成するのではなく、
一度divタグを作ってその小要素の中にスタートボタンを構成。
じゃないと一つ上に表示させている「以下のボタンをクリック」とボタンが横並びになる。
button.style.ボタンに変更を与えたい記述（色とかマージンとか）を書けばJSで生成したボタンも操作できる。

・return s_button2で生成したボタンを返す。
start().addEventListener等と記載する事で、グローバルに宣言していないボタンにもイベントを付与できる。
この関数で生成したボタンは関数内で生成されているため、start()を出ると定義されていないとエラーが出る。



creatbutton()
※問題の選択肢ボタンを生成する関数
※正解・不正解を判別する必要がある。
※正解数をカウントする必要がある
※選択肢を一つずつ独立したボタンにする必要がある
※押されたら次の問題を表示させる必要がある

・APIで取得したデータは、「正解のデータ」「不正解のデータ（3つ、配列）」が渡される。
まずはそれをMIXして「全ての選択肢の配列」を作成する必要がある。
その処理を書く上で使用するデータ（材料）がincorrect_answers, correct_answerである。
だから関数を書く上で必要な材料を
const creatbutton = (incorrect_answers, correct_answer) => {}
という形で受け取っている。
複数の配列をMIXする時は、配列A.concat(配列B)や配列MIX=[配列A,配列B]で作れる。

・MIXした配列を一つずつ出力するには、配列MIX.forEach((X,Y)=>{})を記載。
第一引数（X）には配列内の要素の値（A~D）、第二引数（Y）にはindex(0~3)を受け取る。
（index:その要素が何番目に位置するか）

配列MIXの中身は[0:'a',1:'b',2:'c',3:'d']である。
XにはA,B,C,Dが入っている。Yには0,1,2,3が入っている。
const mix = ['a', 'b','c','d'];
mix.forEach((x)=>{
console.log(x)
})
結果
"A"
"b"
"c"
"d"

・この関数では生成した問題の選択肢ボタンが押された時、その押されたボタンが正解のボタンなのか
判別する必要がある。if (Cho_button2.innerHTML === correct_answer)で判別。
creatbutton = (incorrect_answers, correct_answer)で材料の
correct_answer（正解）を受け取っているため、ボタンに出ているものが正解なのか判別できる。


